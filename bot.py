# bot.py  ‚Äì –ø–æ–¥ wb_utils.py, —Å—Ç–∏–∫–µ—Ä—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è, –∏–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è
import time, json
from wb_utils import (tg, send, edit, answer_callback,
                      load_state, save_state, human_delta, ADMIN_ID)

# ---------- —Å—Ç–∏–∫–µ—Ä—ã ----------
STK_PROPOSAL = "CAACAgIAAxkBAAEOo-hoC1giSTz8OfIgXQKk0G9xmggRuwACyWAAAhGSeUkhrgbAgeWsAzYE"
STK_ACCEPT   = "CAACAgIAAxkBAAEOpBJoC1lmMeeYXAwTYBMxQUbMDMpJkQACnGkAAjVceUmr2v2MsvShNDYE"
# -----------------------------

POLL_TIMEOUT   = 25
MARRY_TIMEOUT  = 3 * 3600
OFFSET         = 0

state = load_state()             # {chat_id:{marriages:[], proposals:[]}}

# ---------- helpers ----------

def chat_bucket(chat_id: int):
    k = str(chat_id)
    if k not in state:
        state[k] = {"marriages": [], "proposals": []}
    return state[k]

def already_married(chat_id, user_id):
    return any(m["is_active"] and user_id in (m["p1_id"], m["p2_id"])
               for m in chat_bucket(chat_id)["marriages"])

def clear_buttons(chat_id, message_id):
    try:
        tg("editMessageReplyMarkup",
           chat_id=chat_id,
           message_id=message_id,
           reply_markup={"inline_keyboard": []})
    except Exception:
        pass

def purge_old_proposals():
    now = int(time.time())
    for chat_id, bucket in state.items():
        for prop in bucket["proposals"][:]:
            if now - prop["created_at"] >= MARRY_TIMEOUT:
                clear_buttons(int(chat_id), prop["message_id"])
                send(int(chat_id), "‚åõÔ∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ.")
                bucket["proposals"].remove(prop)
    save_state(state)

def announce_divorce(chat_id, pair):
    txt = (f"‚ö°Ô∏è {pair['p1_name']} –∏ {pair['p2_name']} –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑–≤–µ–ª–∏—Å—å.\n"
           "–ò–Ω–æ–≥–¥–∞ –¥–æ—Ä–æ–≥–∏ —Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–∏ÃÜ –Ω–∞—à–µÃà–ª —Å–≤–æ–µÃà —Å—á–∞—Å—Ç—å–µ.\n"
           "–ë–µ–∑ —Å—Å–æ—Ä, –±–µ–∑ –¥—Ä–∞–º—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–æ–≤–∞—è –≥–ª–∞–≤–∞.\n"
           "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—Å–µÃà, —á—Ç–æ –±—ã–ª–æ, –∏ —É–¥–∞—á–∏ –≤ —Ç–æ–º, —á—Ç–æ –±—É–¥–µ—Ç.\n"
           "üíîüïä")
    send(chat_id, txt)

# ----- —Å–≤–µ–∂–∏–µ –∏–º–µ–Ω–∞ -----

def get_first_name(chat_id: int, user_id: int, fallback: str) -> str:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–∏ÃÜ first_name —á–µ—Ä–µ–∑ getChatMember.
    –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–∏ÃÜ –≤–∞—Ä–∏–∞–Ω—Ç.
    """
    try:
        r = tg("getChatMember", chat_id=chat_id, user_id=user_id)
        if r.get("ok"):
            return r["result"]["user"]["first_name"]
    except Exception:
        pass
    return fallback

# ---------- /marry ----------

def handle_marry(msg):
    chat_id = msg["chat"]["id"]
    frm_id  = msg["from"]["id"]
    frm_nm  = msg["from"]["first_name"]

    rep = msg.get("reply_to_message")
    if not rep:
        send(chat_id, "–°–¥–µ–ª–∞–∏ÃÜ /marry —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üíç")
        return
    to_id  = rep["from"]["id"]
    to_nm  = rep["from"]["first_name"]

    if frm_id == to_id:
        send(chat_id, "–°–∞–º(–∞) –Ω–∞ —Å–µ–±–µ –Ω–µ –∂–µ–Ω–∏—à—å—Å—è üòâ")
        return
    if already_married(chat_id, frm_id):
        send(chat_id, "–¢—ã —É–∂–µ –≤ –±—Ä–∞–∫–µ ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ–¥–∏—Å—å.")
        return
    if already_married(chat_id, to_id):
        send(chat_id, f"{to_nm} —É–∂–µ –≤ –±—Ä–∞–∫–µ.")
        return

    tg("sendSticker", chat_id=chat_id, sticker=STK_PROPOSAL)

    text = (f"üíç {frm_nm} –¥–µ–ª–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {to_nm} !\n"
            "–°–µ—Ä–¥—Ü–µ –±—å–µÃà—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ, —Ä—É–∫–∏ –¥—Ä–æ–∂–∞—Ç, –∞ –≤ –≥–ª–∞–∑–∞—Ö ‚Äî –ª—é–±–æ–≤—å.\n"
            "‚Äú–¢—ã –≤—ã–∏ÃÜ–¥–µ—à—å –∑–∞ –º–µ–Ω—è?‚Äù ‚Äî –ø—Ä–æ–∑–≤—É—á–∞–ª–æ —Å–µ–∏ÃÜ—á–∞—Å –¥–ª—è –≤—Å–µ—Ö –Ω–∞—Å.\n"
            f"–ó–∞—Ç–∞–∏–º –¥—ã—Ö–∞–Ω–∏–µ... —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç {to_nm} ?\n"
            "‚Äî –í–µ—Å—å —á–∞—Ç –¥–µ—Ä–∂–∏—Ç –∫—É–ª–∞—á–∫–∏!\n‚ù§Ô∏è‚ú®")
    kb = {"inline_keyboard": [[
        {"text": "–ü—Ä–∏–Ω—è—Ç—å üíç",   "callback_data": f"acc:{frm_id}"},
        {"text": "–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", "callback_data": f"dec:{frm_id}"}
    ]]}
    r = send(chat_id, text, reply_markup=kb)
    chat_bucket(chat_id)["proposals"].append({
        "from_id": frm_id, "from_name": frm_nm,
        "to_id": to_id,   "to_name": to_nm,
        "message_id": r["result"]["message_id"],
        "created_at": int(time.time())
    })
    save_state(state)

# ---------- callback accept / decline ----------

def handle_callback(cb):
    data    = cb["data"]
    chat_id = cb["message"]["chat"]["id"]
    msg_id  = cb["message"]["message_id"]
    uid     = cb["from"]["id"]

    bucket = chat_bucket(chat_id)
    prop = next((p for p in bucket["proposals"] if p["message_id"] == msg_id), None)
    if not prop:
        answer_callback(cb["id"], "–£–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ.")
        return
    if uid != prop["to_id"]:
        answer_callback(cb["id"], "–ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥—Ä–µ—Å–∞—Ç–∞!")
        return

    clear_buttons(chat_id, msg_id)

    if data.startswith("acc"):
        tg("sendSticker", chat_id=chat_id, sticker=STK_ACCEPT)

        bucket["marriages"].append({
            "p1_id": prop["from_id"], "p1_name": prop["from_name"],
            "p2_id": prop["to_id"],   "p2_name": prop["to_name"],
            "married_at": int(time.time()),
            "is_active": True
        })
        send(chat_id,
             f"üíç –û–Ω–∞ —Å–∫–∞–∑–∞–ª–∞ ‚Äú–¥–∞‚Äù!\n"
             f"{prop['from_name']} + {prop['to_name']} —Ç–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞!\n"
             "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å! ‚ù§Ô∏è‚ú®")
    else:
        send(chat_id,
             f"üíî {prop['to_name']} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {prop['from_name']}\n"
             "–ú—ã —Ä—è–¥–æ–º, –≤—Å–µÃà –µ—â–µÃà –≤–ø–µ—Ä–µ–¥–∏! üñ§")

    bucket["proposals"].remove(prop)
    save_state(state)
    answer_callback(cb["id"])

# ---------- /razvod ----------

def handle_razvod(msg):
    chat_id = msg["chat"]["id"]
    uid     = msg["from"]["id"]
    nm      = msg["from"]["first_name"]
    bucket  = chat_bucket(chat_id)
    pair = next((m for m in bucket["marriages"]
                 if m["is_active"] and uid in (m["p1_id"], m["p2_id"])), None)
    if not pair:
        send(chat_id, "–¢—ã –Ω–∏ —Å –∫–µ–º –Ω–µ –∂–µ–Ω–∞—Ç(–∞).")
        return
    other_id   = pair["p2_id"] if pair["p1_id"] == uid else pair["p1_id"]
    other_name = get_first_name(chat_id, other_id,
                                pair["p2_name"] if pair["p1_id"] == uid else pair["p1_name"])
    kb = {"inline_keyboard":[[
        {"text":"–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–≤–æ–¥ üíî", "callback_data":f"div:{uid}"}
    ]]}
    send(chat_id,
         f"‚ö†Ô∏è {nm} —Ö–æ—á–µ—Ç —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å —Å {other_name}.",
         reply_markup=kb)

def handle_divorce_confirm(cb):
    chat_id = cb["message"]["chat"]["id"]
    uid     = cb["from"]["id"]
    who     = int(cb["data"].split(":")[1])
    bucket  = chat_bucket(chat_id)
    pair = next((m for m in bucket["marriages"]
                 if m["is_active"] and who in (m["p1_id"], m["p2_id"])), None)
    if not pair or uid not in (pair["p1_id"], pair["p2_id"]):
        answer_callback(cb["id"], "–ù–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞.")
        return
    pair["is_active"] = False
    save_state(state)
    clear_buttons(chat_id, cb["message"]["message_id"])
    send(chat_id, "–†–∞–∑–≤–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω üñã")
    answer_callback(cb["id"])
    announce_divorce(chat_id, pair)

# ---------- /rating ----------

def handle_rating(msg):
    chat_id = msg["chat"]["id"]
    active = [m for m in chat_bucket(chat_id)["marriages"] if m["is_active"]]
    if not active:
        send(chat_id, "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∂–µ–Ω–∞—Ç üíî")
        return

    now = int(time.time())
    lines = ["üëë –ù–∞—à–∏ –ø–∞—Ä—ã\n"]

    for m in active:
        # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ first_name
        p1 = get_first_name(chat_id, m["p1_id"], m["p1_name"])
        p2 = get_first_name(chat_id, m["p2_id"], m["p2_name"])
        lines.append(f"{p1} + {p2} ‚Äî {human_delta(now - m['married_at'])}\n")

    send(chat_id, "\n".join(lines).rstrip())

# ---------- /xui ----------

def handle_xui(msg):
    if msg["from"]["id"] != ADMIN_ID:
        return
    rep = msg.get("reply_to_message")
    if not rep:
        send(msg["chat"]["id"], "–°–¥–µ–ª–∞–∏ÃÜ /xui —Ä–µ–ø–ª–∞–µ–º.")
        return
    victim = rep["from"]["id"]
    chat_id= msg["chat"]["id"]
    bucket = chat_bucket(chat_id)
    pair = next((m for m in bucket["marriages"]
                 if m["is_active"] and victim in (m["p1_id"], m["p2_id"])), None)
    if not pair:
        send(chat_id, f"{rep['from']['first_name']} –Ω–µ –≤ –±—Ä–∞–∫–µ.")
        return
    pair["is_active"] = False
    save_state(state)
    announce_divorce(chat_id, pair)

# ---------- user left ----------

def handle_left(upd):
    chat_id = upd["my_chat_member"]["chat"]["id"]
    uid     = upd["my_chat_member"]["from"]["id"]
    bucket  = chat_bucket(chat_id)
    pair = next((m for m in bucket["marriages"]
                 if m["is_active"] and uid in (m["p1_id"], m["p2_id"])), None)
    if pair:
        pair["is_active"] = False
        save_state(state)
        announce_divorce(chat_id, pair)

# ---------- main loop ----------

CMD = {
    "/marry":  handle_marry,
    "/razvod": handle_razvod,
    "/rating": handle_rating,
    "/xui":    handle_xui,
}

def main():
    global OFFSET
    while True:
        upd = tg("getUpdates", offset=OFFSET, timeout=POLL_TIMEOUT)
        for u in upd.get("result", []):
            OFFSET = u["update_id"] + 1
            if "message" in u and "text" in u["message"]:
                cmd = u["message"]["text"].split()[0]
                if cmd in CMD:
                    CMD[cmd](u["message"])
            elif "callback_query" in u:
                cb = u["callback_query"]
                if cb["data"].startswith(("acc","dec")):
                    handle_callback(cb)
                elif cb["data"].startswith("div"):
                    handle_divorce_confirm(cb)
            elif u.get("my_chat_member",{}).get("new_chat_member",{}).get("status") == "left":
                handle_left(u)
        purge_old_proposals()

if __name__ == "__main__":
    main()
